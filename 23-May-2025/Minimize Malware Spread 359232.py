# Problem: Minimize Malware Spread - https://leetcode.com/problems/minimize-malware-spread/

class UnionFind:
    def __init__(self, n):
        self.parent = list(range(n))
        self.size = [1] * n
    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]
    
    def union(self, x, y):
        xr, yr = self.find(x), self.find(y)

        if xr != yr:
            self.parent[yr] = xr
            self.size[xr] += self.size[yr]

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        uf = UnionFind(n)

        for i in range(n):
            for j in range(n):
                if graph[i][j] == 1:
                    uf.union(i, j)
        
        component_size = {}
        for i in range(n):
            root = uf.find(i)
            component_size[root] = component_size.get(root, 0) + 1
        
        infected_count = {}
        for node in initial:
            root = uf.find(node)
            infected_count[root] = infected_count.get(root, 0) + 1
        
        maxval = -1
        result = - 1

        for node in sorted(initial):
            root = uf.find(node)

            if infected_count[root] == 1:
                saved = component_size[root]
                if saved > maxval:
                    maxval = saved
                    result = node
        return result if result != -1 else min(initial)